function BestF0 = YinBest(x,samplerate)%% FUNCTION: CALCULATE F0 OF AN ARRAY ASSUMING A SAMPLERATE; %  adapted from yin.m to work with AcousticOnsetsNormAmp.m%  %  YinBest.m is an adaptation of yin.m, developed by Alain de Cheveigne%  (SEE CITATIONS, COPYRIGHT, AND LINKS BELOW). Full credit for the %  functionality of YinBest.m, and the majority of its script goes to Alain de Cheveigne%  and Hideki Kawahara. The paper on yin, published in JASA (2002), %  can be downloaded here: audition.ens.fr/adc/pdf/2002_JASA_YIN.pdf. This%  function requires the full yin package of functions that can be%  downloaded here: http://audition.ens.fr/adc/sw/yin.zip%%  YinBest.m was created to work with AcousticOnsetsNormAmp.m by: %  Benjamin H. Zobel - 01-20-2018%  Neurocognition and Perception Laboratory%  Department of Psychological and Brain Sciences%  University of Massachusetts Amherst%%%DEPENDANTS (OTHER FUNCTIONS THAT DEPEND ON THIS FUNCTION):%1. YinBest.m was written specifically for AcousticOnsetsNormAmp.m.%   YinBest.m accepts input of wav array from AcousticOnsetsNormAmp.m and%   returns its F0.%%%%DEPENDENCIES (OTHER FUNCTIONS THAT THIS FUNCTION REQUIRES):%1. All functions contained in the yin package that can be downloaded from http://audition.ens.fr/adc/sw/yin.zip%   yin is a popular F0 estimation algorithm developed by Alain de%   Cheveigne and Hideki Kawahara (SEE CITATIONS AND COPYRIGHT BELOW)%   NOTE: After downloading the yin package from the url provided above, unzip and add a path to the yin folder and all of its contents.        %%%DESCRIPTION OF INPUTS:%x: waveform array of which you want to estimate F0. %%samplerate: Sample rate of waveform (in Hertz)%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% CITATIONS AND COPYRIGHT NOTICE FOR YIN:% See 'yin.html' for more info.% Version 28 July 2003.% Alain de Cheveigné, CNRS/Ircam, 2002.% Copyright (c) 2002 Centre National de la Recherche Scientifique.%% Permission to use, copy, modify, and distribute this software without % fee is hereby granted FOR RESEARCH PURPOSES only, provided that this% copyright notice appears in all copies and in all supporting % documentation, and that the software is not redistributed for any % fee (except for a nominal shipping charge). %% For any other uses of this software, in original or modified form, % including but not limited to consulting, production or distribution% in whole or in part, specific prior permission must be obtained from CNRS.% Algorithms implemented by this software may be claimed by patents owned % by CNRS, France Telecom, Ircam or others.%% The CNRS makes no representations about the suitability of this % software for any purpose.  It is provided "as is" without express% or implied warranty.%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% default parameter values ([]: to be determined)minf0 = 75;			% Hz - minimum frequencymaxf0 = [];			% Hz - maximum frequencywsize = []; 		% s - integration window sizelpf = [];			% Hz - lowpass prefiltering cutoffthresh = 0.1;		% difference function thresholdrelflag = 1;		% if true threshold is relative to global min of difference functionbufsize=10000;		% computation buffer sizehop = 32;			% samples - interval between estimatesrange=[];			% range of file samples to processsr=samplerate;      % sampling rateshift=0;			% flag to control the temporal shift of analysis windows (left/sym/right)plotthreshold=0.2;	% aperiodicity above which plot is green or yellow%set up an empty structurep = [];% handle parametersif nargin<1; help yin; return; endfileinfo=sf_info(x); if ~isempty(fileinfo.sr) p.sr=fileinfo.sr;	end % get sr from fileif fileinfo.nchans > 1	disp(['warning: using column 1 of ', num2str(fileinfo.nchans), '-column data']); endif ~isfield(p, 'sr'); p.sr=sr; endif isempty(p.sr); p.sr = samplerate; endif ~isfield(p, 'range') | isempty(p.range); p.range=[1 fileinfo.nsamples]; endif ~isfield(p, 'minf0'); p.minf0=minf0; endif ~isfield(p, 'thresh'); p.thresh=thresh; endif ~isfield(p, 'relflag'); p.relflag=relflag; endif ~isfield(p, 'bufsize'); p.bufsize=bufsize; endif ~isfield(p, 'hop'); p.hop=hop; endif ~isfield(p, 'maxf0'); p.maxf0=floor(p.sr/4); end % defaultif ~isfield(p, 'wsize'); p.wsize=ceil(p.sr/p.minf0); end % defaultif ~isfield(p, 'lpf'); p.lpf=p.sr/4; end % defaultif mod(p.hop,1); error('hop should be integer'); endif ~isfield(p, 'shift'); p.shift=shift; end % defaultif ~isfield(p, 'plotthreshold'); p.plotthreshold=plotthreshold; end % default% estimate periodr=yink(p,fileinfo);prd=r.r1; % period in samplesap0=r.r2; % gross aperiodicity measureap= r.r3; % fine aperiodicity measurepwr=r.r4; % period-smoothed instantaneous powerf0 = log2(p.sr ./ prd) - log2(440); 	% convert to octaves re: 440 Hz% choose sample to report as "the" f0 of the entire signal[mn, idx] = min(ap0);best=f0(idx);BestF0 = 2^best*440;% convert octave re 440 to note:function s=note(o)n=round(12*o);cents = 100*(12*o-n);oct=floor((n-3)/12)+5;chroma=mod(n,12);chromalist = {'A'; 'A#'; 'B'; 'C'; 'C#'; 'D'; 'D#'; 'E'; 'F'; 'F#';...	'G'; 'G#'};cents = sprintf('%+.0f',cents);s=[char(chromalist(chroma+1)),num2str(oct),' ',num2str(cents), ' cents'];